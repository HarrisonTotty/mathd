#!/usr/bin/env python
# A python script for running daemonized Wolfram Language expressions in the command line


import os
import sys
import argparse
import errno


# ---------- Argument Parsing ----------
argparser = argparse.ArgumentParser(
    description='A python script for running daemonized Wolfram Language expressions in the command line (CLIENT).',
    epilog='Created by Harrison Totty <harrisont@wolfram.com>')

argparser.add_argument('expression',
    help='the Wolfram Language expression to evaluate')

args = argparser.parse_args()
# --------------------------------------


# ---------- Global Variables ----------
runpath = os.path.expanduser('~/.cache/mathd')
logfile = os.path.join(runpath, 'mathd.log')
inpipe = os.path.join(runpath, 'pipe.in')
outpipe = os.path.join(runpath, 'pipe.out')
pidfile = os.path.join(runpath, 'mathd.pid')
# --------------------------------------



def main():
    '''
    The main entry point of the script.
    '''
    if pid_exists(get_pid()):
        result = sendeval(args.expression)
        
        # If there isn't any output, don't print anything.
        if result != '':
            print(result)
    else:
        print('ERROR: mathd service not running...')
        sys.exit(2)



def sendeval(expression):
    '''
    Sends a Wolfram Language expression to the daemonized kernel,
    returning the result.
    '''
    with open(inpipe, 'a') as inf:
        inf.write(expression + '\n')
    with open(outpipe, 'r') as outf:
        return outf.read().strip()



def get_pid():
    '''
    Gets the process ID of the daemonized Wolfram Kernel by reading the PID file.
    '''
    if os.path.isfile(pidfile):
        try:
            with open(pidfile, 'r') as pf:
                pid = int(pf.read().strip())
            return pid
        except:
            print('ERROR: Unable to read pid file at ' + pidfile + '...')
            sys.exit(2)
    else:
        return -1



def pid_exists(pid):
    '''
    Checks whether the given PID exists as a running process.
    '''
    if pid < 0:
        return False
    if pid == 0:
        raise ValueError('invalid PID 0')
    try:
        os.kill(pid, 0)
    except OSError as err:
        if err.errno == errno.ESRCH:
            return False
        elif err.errno == errno.EPERM:
            return True
        else:
            raise
    else:
        return True



if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)